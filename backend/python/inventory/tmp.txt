
from typing import Optional
import httpx
from fastapi import Header

class AccountRepository:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.client = httpx.AsyncClient(base_url=base_url)

    async def get_by_id(
        self, id: str, authorization: str, version: Optional[str] = None
    ):
        headers = {"Authorization": authorization}
        if version:
            headers["If-None-Match"] = version
        response = await self.client.get(f"/account/{id}", headers=headers)
        response.raise_for_status()
        return response.json()

    async def close(self):
        await self.client.aclose()






from fastapi import FastAPI, Depends
from pydantic import BaseModel

app = FastAPI()

@app.get("/account/{id}")
async def get_account(id: str, authorization: str = Header(...), version: Optional[str] = Header(None)):
    repo = AccountRepository(base_url="http://example.com/api")
    account = await repo.get_by_id(id, authorization, version)
    await repo.close()
    return account




import pytest
from httpx import AsyncClient

@pytest.mark.asyncio
async def test_get_by_id():
    async with AsyncClient(base_url="http://example.com/api") as client:
        response = await client.get("/account/123", headers={"Authorization": "Bearer token"})
        assert response.status_code == 200
        assert response.json() == {"id": "123", "name": "Test Account"}
